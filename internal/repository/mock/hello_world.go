// Code generated by MockGen. DO NOT EDIT.
// Source: hello_world.go
//
// Generated by this command:
//
//	mockgen -source=hello_world.go -destination=mock/hello_world.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHelloWorld is a mock of HelloWorld interface.
type MockHelloWorld struct {
	ctrl     *gomock.Controller
	recorder *MockHelloWorldMockRecorder
}

// MockHelloWorldMockRecorder is the mock recorder for MockHelloWorld.
type MockHelloWorldMockRecorder struct {
	mock *MockHelloWorld
}

// NewMockHelloWorld creates a new mock instance.
func NewMockHelloWorld(ctrl *gomock.Controller) *MockHelloWorld {
	mock := &MockHelloWorld{ctrl: ctrl}
	mock.recorder = &MockHelloWorldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloWorld) EXPECT() *MockHelloWorldMockRecorder {
	return m.recorder
}

// Bar mocks base method.
func (m *MockHelloWorld) Bar(ctx context.Context) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bar", ctx)
	ret0, _ := ret[0].(int32)
	return ret0
}

// Bar indicates an expected call of Bar.
func (mr *MockHelloWorldMockRecorder) Bar(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bar", reflect.TypeOf((*MockHelloWorld)(nil).Bar), ctx)
}

// Baz mocks base method.
func (m *MockHelloWorld) Baz(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Baz", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Baz indicates an expected call of Baz.
func (mr *MockHelloWorldMockRecorder) Baz(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Baz", reflect.TypeOf((*MockHelloWorld)(nil).Baz), ctx)
}

// Foo mocks base method.
func (m *MockHelloWorld) Foo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Foo indicates an expected call of Foo.
func (mr *MockHelloWorldMockRecorder) Foo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockHelloWorld)(nil).Foo), ctx)
}
